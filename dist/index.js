(()=>{"use strict";var n={n:t=>{var r=t&&t.__esModule?()=>t.default:()=>t;return n.d(r,{a:r}),r},d:(t,r)=>{for(var e in r)n.o(r,e)&&!n.o(t,e)&&Object.defineProperty(t,e,{enumerable:!0,get:r[e]})},o:(n,t)=>Object.prototype.hasOwnProperty.call(n,t)};const t=require("fs");var r=n.n(t);const e=require("path");var o=n.n(e);const a=require("readline");var c=n.n(a),u=function(n){return 0===n.length?"":n[0]};const i={string:u,boolean:function(n){return 0!==n.length&&n[0]},strComma:function(n,t){var r=u(n);return""===r?t:"".concat(r,".").concat(t)},commaToArray:function(n){return n.replace(/ /g,"").split(",").filter((function(n){return""!==n})).map((function(n){return n.trim()}))},arrayToComma:function(n){for(var t="",r=0,e=n;r<e.length;r++){var o=e[r];""!==o&&(t+="".concat(o,","))}return t.slice(0,t.length-1)}};var s=function(n,t,r,e){return new(r||(r=Promise))((function(o,a){function c(n){try{i(e.next(n))}catch(t){a(t)}}function u(n){try{i(e.throw(n))}catch(t){a(t)}}function i(n){var t;n.done?o(n.value):(t=n.value,t instanceof r?t:new r((function(n){n(t)}))).then(c,u)}i((e=e.apply(n,t||[])).next())}))},l=function(n,t){var r,e,o,a,c={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return a={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function u(u){return function(i){return function(u){if(r)throw new TypeError("Generator is already executing.");for(;a&&(a=0,u[0]&&(c=0)),c;)try{if(r=1,e&&(o=2&u[0]?e.return:u[0]?e.throw||((o=e.return)&&o.call(e),0):e.next)&&!(o=o.call(e,u[1])).done)return o;switch(e=0,o&&(u=[2&u[0],o.value]),u[0]){case 0:case 1:o=u;break;case 4:return c.label++,{value:u[1],done:!1};case 5:c.label++,e=u[1],u=[0];continue;case 7:u=c.ops.pop(),c.trys.pop();continue;default:if(!(o=c.trys,(o=o.length>0&&o[o.length-1])||6!==u[0]&&2!==u[0])){c=0;continue}if(3===u[0]&&(!o||u[1]>o[0]&&u[1]<o[3])){c.label=u[1];break}if(6===u[0]&&c.label<o[1]){c.label=o[1],o=u;break}if(o&&c.label<o[2]){c.label=o[2],c.ops.push(u);break}o[2]&&c.ops.pop(),c.trys.pop();continue}u=t.call(n,c)}catch(i){u=[6,i],e=0}finally{r=o=0}if(5&u[0])throw u[1];return{value:u[0]?u[1]:void 0,done:!0}}([u,i])}}},f=function(n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t,r=n[Symbol.asyncIterator];return r?r.call(n):(n="function"==typeof __values?__values(n):n[Symbol.iterator](),t={},e("next"),e("throw"),e("return"),t[Symbol.asyncIterator]=function(){return this},t);function e(r){t[r]=n[r]&&function(t){return new Promise((function(e,o){(function(n,t,r,e){Promise.resolve(e).then((function(t){n({value:t,done:r})}),t)})(e,o,(t=n[r](t)).done,t.value)}))}}};const p={string:function(n){for(var t=[],r=1;r<arguments.length;r++)t[r-1]=arguments[r];var e=process.env[n]||i.string(t);return""==e&&(console.log("not found env: key=".concat(n)),process.exit(1)),e},boolean:function(n){for(var t=[],r=1;r<arguments.length;r++)t[r-1]=arguments[r];var e=process.env[n]||"";if(""===e){if(0!==t.length)return t[0];console.log("not found env: key=".concat(n)),process.exit(1)}return"true"===e},readFile:function(){for(var n,t,e,a,u=[],i=0;i<arguments.length;i++)u[i]=arguments[i];return s(this,void 0,Promise,(function(){var i,s,p,y,h,v,g,b;return l(this,(function(l){switch(l.label){case 0:i=o().join.apply(o(),u),s=c().createInterface({input:r().createReadStream(i),crlfDelay:1/0}),l.label=1;case 1:l.trys.push([1,6,7,12]),p=!0,y=f(s),l.label=2;case 2:return[4,y.next()];case 3:if(h=l.sent(),n=h.done)return[3,5];if(a=h.value,p=!1,v=a.replace(/ /g,""),2!=(g=v.split("=")).length)return[3,4];process.env[g[0]]=g[1],l.label=4;case 4:return p=!0,[3,2];case 5:return[3,12];case 6:return b=l.sent(),t={error:b},[3,12];case 7:return l.trys.push([7,,10,11]),p||n||!(e=y.return)?[3,9]:[4,e.call(y)];case 8:l.sent(),l.label=9;case 9:return[3,11];case 10:if(t)throw t.error;return[7];case 11:return[7];case 12:return[2]}}))}))}};const y={fitOS:function(n){var t=function(){var n=p.string("OS","linux"),t={from:/\\/g,to:"/"};"Windows_NT"===n&&(t.from=/\//g,t.to="\\");return t}();return n.replace(t.from,t.to)}};var h,v=(h=function(n,t){return h=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(n,t){n.__proto__=t}||function(n,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(n[r]=t[r])},h(n,t)},function(n,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=n}h(n,t),n.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});const g=function(n){function t(t){for(var r=[],e=1;e<arguments.length;e++)r[e-1]=arguments[e];var o=n.call(this,t)||this;return 0==r.length&&(o.msg={en:t}),o.msg=r[0],o.msg.en||(o.msg.en=t),o}return v(t,n),t.prototype.getMsg=function(n){return this.msg.hasOwnProperty(n)?this.msg[n]:this.msg.hasOwnProperty("en")?this.msg.en:"not found error msg"},t}(Error);var b,m=function(){var n=function(t,r){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(n,t){n.__proto__=t}||function(n,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(n[r]=t[r])},n(t,r)};return function(t,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function e(){this.constructor=t}n(t,r),t.prototype=null===r?Object.create(r):(e.prototype=r.prototype,new e)}}();!function(n){n.fnEnv=p,n.fnParam=i,n.fnPath=y;var t=function(n){function t(){return null!==n&&n.apply(this,arguments)||this}return m(t,n),t}(g);n.JsError=t}(b||(b={}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,